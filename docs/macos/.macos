#!/usr/bin/env zsh

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


echo "#-----------------------------------------------------------------#"
echo "#                       General UI/UX                             #"
echo "#-----------------------------------------------------------------#"
echo ""

# Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window
echo "Enable admin info for login screen clock"
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# Disable the sound effects on boot
echo "Disable the sound effects on boot"
sudo nvram SystemAudioVolume=" "

# Hide Siri in menu bar
defaults write com.apple.Siri StatusMenuVisible -bool false

# Hide Spotlight in menu bar
defaults -currentHost write com.apple.Spotlight MenuItemHidden -int 1

# Disable the “Are you sure you want to open this application?” dialog
# echo "Disable the “Are you sure you want to open this application?” dialog"
# defaults write com.apple.LaunchServices LSQuarantine -bool false


echo "#-----------------------------------------------------------------#"
echo "#                            Finder                               #"
echo "#-----------------------------------------------------------------#"
echo ""

# Set HOME as the default location for new Finder windows
echo "Set HOME as the default location for new Finder windows"
defaults write com.apple.finder NewWindowTarget -string "PfLo"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"

# Show the ~/Library folder
echo "Show the ~/Library folder"
chflags nohidden ~/Library

# Finder: Show hidden files by default
echo "Finder: show hidden files"
defaults write com.apple.finder AppleShowAllFiles -bool true

# Finder: Show all filename extensions
echo "Finder: show file extensions"
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Finder: Show status bar
echo "Finder: show status bar"
defaults write com.apple.finder ShowStatusBar -bool true

# Finder: Show path bar
echo "Finder: show path bar"
defaults write com.apple.finder ShowPathbar -bool true

# Finder: Keep folders on top when sorting by name
echo "Keep folders on top when sorting by name"
defaults write com.apple.Finder _FXSortFoldersFirst -bool true

# Allow text selection in Quick Look
echo "Enable text selection in Quick Look"
defaults write com.apple.finder QLEnableTextSelection -bool TRUE

# Disable the warning when changing a file extension
echo "Disable the warning when changing a file extension"
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Enable calculate all sizes
echo "Enable calculate all sizes"
/usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.finder.plist" -c 'Delete "StandardViewSettings:ExtendedListViewSettings:calculateAllSizes" bool'
/usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.finder.plist" -c 'Add "StandardViewSettings:ExtendedListViewSettings:calculateAllSizes" bool true'

/usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.finder.plist" -c 'Delete "StandardViewSettings:ExtendedListViewSettings:useRelativeDates" bool'
/usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.finder.plist" -c 'Add "StandardViewSettings:ExtendedListViewSettings:useRelativeDates" bool false'

/usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.finder.plist" -c 'Delete "StandardViewSettings:ListViewSettings:calculateAllSizes" bool'
/usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.finder.plist" -c 'Add "StandardViewSettings:ListViewSettings:calculateAllSizes" bool true'

# Enabling snap-to-grid for icons on the desktop and in other icon views
echo "Enabling snap-to-grid for icon views"
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist

# Avoid creating .DS_Store files on network or USB volumes
echo "Avoid creating .DS_Store files on network or USB volumes"
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Disable disk image verification
echo "Disable disk image verification"
defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

# Expand save panel by default
echo "Expand save panel by default"
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Expand print panel by default
echo "Expand print panel by default"
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true


echo "#-----------------------------------------------------------------#"
echo "#                          LaunchPad                              #"
echo "#-----------------------------------------------------------------#"
echo ""

# Change the Rows and Columns of Launchpad
echo "set launchpad to 6 rows and 8 columns"
defaults write com.apple.dock springboard-rows -int 6
defaults write com.apple.dock springboard-columns -int 8
defaults write com.apple.dock ResetLaunchPad -bool TRUE
killall Dock


echo "#-----------------------------------------------------------------#"
echo "#   Trackpad, mouse, keyboard, Bluetooth accessories, and input   #"
echo "#-----------------------------------------------------------------#"
echo ""

# Tap to click
echo "Tap to click"
defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true

# Drag windows with three fingers
echo "Drag windows with three fingers"
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true 

# Full Keyboard Access
# In windows and dialogs, press Tab to move keyboard focus between:
# 1 : Text boxes and lists only
# 3 : All controls
echo "enable full keyboard access for controls"
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

# Enable two finger tap as right click
echo "Enable two finger tap as right click"
defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true
defaults write com.apple.AppleMultitouchTrackpad TrackpadRightClick -bool true
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true


echo "#-----------------------------------------------------------------#"
echo "#                             Safari                              #"
echo "#-----------------------------------------------------------------#"
echo ""

# Prevent Safari from opening ‘safe’ files automatically after downloading
echo "Prevent Safari from opening safe files automatically after downloading"
defaults write com.apple.Safari AutoOpenSafeDownloads -bool false


# Enable the Develop menu and the Web Inspector in Safari
echo "Enable the Develop menu and the Web Inspector in Safari"
defaults write com.apple.Safari IncludeDevelopMenu -bool true
defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

# Show Safari status bar
echo "Show Safari status bar"
defaults write com.apple.Safari ShowStatusBar -boolean true

# Add a context menu item for showing the Web Inspector in web views
echo "Add a context menu item for showing the Web Inspector in web views"
defaults write NSGlobalDomain WebKitDeveloperExtras -bool true


echo "#-----------------------------------------------------------------#"
echo "#                             Misc                                #"
echo "#-----------------------------------------------------------------#"
echo ""

# Disable auto-correct
echo "Disable auto-correct"
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false


echo "#-----------------------------------------------------------------#"
echo "#                             Oh My Zsh                           #"
echo "#-----------------------------------------------------------------#"
echo ""

#Install Zsh & Oh My Zsh
echo "Installing Oh My ZSH..."
curl -L http://install.ohmyz.sh | sh


echo "#-----------------------------------------------------------------#"
echo "#                             Xcode                               #"
echo "#-----------------------------------------------------------------#"
echo ""

# Install xcode
echo "Installing xcode-stuff"
xcode-select --install


echo "#-----------------------------------------------------------------#"
echo "#                             Homebrew                            #"
echo "#-----------------------------------------------------------------#"
echo ""

# Check for Homebrew,
# Install if we don't have it
if test ! $(which brew); then
echo "Installing homebrew..."
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Update homebrew recipes
echo "Updating homebrew..."
brew update

echo 'export PATH="/opt/homebrew/bin:$PATH"' >> ~/.zshrc

brew tap homebrew/cask-versions

echo "Installing Git..."
brew install git

echo "Git config"

git config --global credential.helper store
git config --global user.name "technoluc"
git config --global user.email luc@technoluc.nl

echo "Installing brew git utilities..."
brew install git-extras
brew install legit
brew install git-flow


echo "#-----------------------------------------------------------------#"
echo "#                          Homebrew Apps                          #"
echo "#-----------------------------------------------------------------#"
echo ""

# Formulae
formulae=(
    mackup
    mas
    thefuck
    wget
)

# Casks
casks=(
    alt-tab
    bartender
    brave-browser
    cyberduck
    devtoys
    fig
    google-chrome
    notion
    raycast
    powershell-preview
    spotify
    suspicious-package
    termius
    visual-studio-code
)


# Install apps to /Applications
# Default is: /Users/$user/Applications

for formula in $formulae ;do
    echo "installing $formula."
    brew install $formula
;done

for cask in $casks ;do
    echo "installing $cask with Cask..."
    brew install --cask --appdir="/Applications" $cask
;done

brew cleanup cask
brew cleanup


echo "#-----------------------------------------------------------------#"
echo "#                              MAS                                #"
echo "#-----------------------------------------------------------------#"
echo ""

# Mac App Store Apps
mas_apps=(
  409203825   # Numbers
  897118787   # Shazam
  1295203466  # Microsoft Remote Desktop
  1136220934  # Infuse
  1451685025  # WireGuard
  1147396723  # WhatsApp
  409201541   # Pages
  836847379   # NET_Toolkit
)

# Other mac apps
#   1609781496  # Rayon    
#   1530751461  # Snippety
#   1559269364  # Notion Web Clipper
#   899247664   # TestFlight


for mapp in $mas_apps ;do
    echo "installing $mapp with MAS..."
    mas install $mapp
;done

echo "#-----------------------------------------------------------------#"
echo "#                         Office                                  #"
echo "#-----------------------------------------------------------------#"
echo ""

# Download & Install Office

wget -P ~/Downloads https://github.com/technoluc/macos/releases/download/v16.66/Microsoft.Office.2021.v16.66.zip
unzip ~/Downloads/Microsoft.Office.2021.v16.66.zip -d ~/Downloads
yes | PAGER=cat hdiutil attach ~/Downloads/Microsoft.Office*.dmg
sudo installer -pkg /Volumes/Microsoft*/Microsoft*.pkg -target /
sudo installer -pkg /Volumes/Microsoft*/Extra/LTSC*.pkg -target /



echo "#-----------------------------------------------------------------#"
echo "#                           Dock                                  #"
echo "#-----------------------------------------------------------------#"
echo ""

# reset all
# defaults delete com.apple.dock; killall Dock

# clear items
defaults write com.apple.dock persistent-apps -array
defaults write com.apple.dock persistent-others -array

# Add Applications to Dock
for dockItem in {/System/Applications/Launchpad,/System/Cryptexes/App/System/Applications/Safari,/System/Applications/{"Messages","Mail","Notes"},/Applications/{"Spotify","Visual Studio Code","Brave Browser","Notion","Microsoft Remote Desktop","Termius","Microsoft Word","Microsoft Excel","Microsoft OneNote"},/System/Applications/Utilities/Terminal,/System/Applications/{"App Store","System Settings"}}.app; do
  defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>'$dockItem'</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
done

# Add Applications and Download folders
defaults write com.apple.dock 'persistent-others' -array-add '<dict><key>tile-data</key><dict><key>arrangement</key><integer>0</integer><key>displayas</key><integer>1</integer><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/</string><key>_CFURLStringType</key><integer>0</integer></dict><key>preferreditemsize</key><integer>-1</integer><key>showas</key><integer>0</integer></dict><key>tile-type</key><string>directory-tile</string></dict>'  
defaults write com.apple.dock 'persistent-others' -array-add '<dict><key>tile-data</key><dict><key>arrangement</key><integer>0</integer><key>displayas</key><integer>1</integer><key>file-data</key><dict><key>_CFURLString</key><string>/Users/luckurstjens/Downloads/</string><key>_CFURLStringType</key><integer>0</integer></dict><key>preferreditemsize</key><integer>-1</integer><key>showas</key><integer>0</integer></dict><key>tile-type</key><string>directory-tile</string></dict>'  

# Set Dock icon size
defaults write com.apple.dock tilesize -int 45

killall Dock

echo "#-----------------------------------------------------------------#"
echo "#                         Terminal                                #"
echo "#-----------------------------------------------------------------#"
echo ""

PLIST="$HOME/Library/Preferences/com.apple.Terminal.plist"
THEME=`/usr/libexec/PlistBuddy -c "Print 'Startup Window Settings'" $PLIST`
/usr/libexec/PlistBuddy -c "Set 'Window Settings':${THEME}:useOptionAsMetaKey YES" $PLIST
/usr/libexec/PlistBuddy -c "Set 'Window Settings':${THEME}:shellExitAction 1" $PLIST
killall Terminal
